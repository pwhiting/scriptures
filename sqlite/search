#!/usr/local/bin/python3
import os,json
from common import wrap, bold, get_query, heading 
from pinecone import Pinecone
from openai import OpenAI

secret = {
 'pinecone_api_key': os.getenv('PINECONE_API_KEY'),
 'openai_api_key':  os.getenv('OPEN_AI_KEY')
}
body = {'query': get_query()}


def embed(text):
    try:
        openai_api_key = secret.get('openai_api_key')
        if not openai_api_key:
            raise ValueError("OpenAI API key is missing from secrets")
        
        client = OpenAI(api_key=openai_api_key)
        response = client.embeddings.create(
            input=text,
            model="text-embedding-3-large"
        )
        return response.data[0].embedding
    except Exception as e:
        print(f"Error generating embedding: {e}")
        raise e

    
def lambda_handler(event, context):
    try:
        
        pinecone_api_key = secret.get('pinecone_api_key')
        if not pinecone_api_key:
            return {
                'statusCode': 500,
                'body': json.dumps({'error': 'Pinecone API key is missing from secrets'})
            }

        query = body.get('query', '')
        if not query:
            return {
                'statusCode': 400,
                'body': json.dumps({'error': 'missing query'})
            }

        k = body.get('k', 10)  # Default value for k
        index_name = 'content'  # Don't allow caller to change this
        
        namespace = body.get('namespace-noop', 'Chapters-1.0')  # Default value for namespace
        
        kwargs = {'namespace':namespace,'include_metadata':True}
    
        filter = body.get('filter',None)
        if filter is not None:
            kwargs['filter'] = filter

        pc = Pinecone(api_key=pinecone_api_key)
        index = pc.Index(index_name)

        embedding = embed(query)
        res = index.query(vector=embedding,top_k=k,**kwargs)
        result_data = [ { 'score': match.score, 'metadata': match.metadata } for match in res.matches ]
        for row in result_data:
            print(f"""{bold(row['metadata']['reference'])} {row['metadata']['text']}\n\n\n""")
   #         wrap(f"""{bold(row['metadata']['reference'])} {row['metadata']['text']}\n\n\n""")

    except Exception as e:
        print(f"Error in lambda_handler: {e}")
        return {
            'statusCode': 500,
            'body': json.dumps({'error': str(e)})
        }


lambda_handler(None,None)
